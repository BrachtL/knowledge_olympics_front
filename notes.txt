

/*
considerações:

	next steps:
	
	- add password and confirmation password fields to sutedent's login page
	
	- remove subject field from teacher's login page?
	
	- backend: student login 
		receive form data, send jwt and student's name
		jwt should store student or teacher, id, name
	- frontend: make a request with token to verify if user is logged
	when trying to access /question and /teacher-question
	- backend: verify if the token is valid when trying to access
	/question and /teacher-question

	what is the difference between save localStorage, sessionStorage...?
	any of those are cookies?
	choose one method to save (will I be saving anything but jwt?)
	
	
	show the student's name on the top, to prevent and detect if someone uses
	the other student's name
	
	
	jwt has to expire 15 minutes after the exam's duration
	

	urls
		root/aluno 		(login do aluno)
		root/professor 	(login do professor)
		root/prova 		(aluno resolve a prova, se não estiver logado redir)
		root/criar 		(professor cria questões, se não estiver logado redir)
		root/ 			(pergunta se é aluno ou prof e redireciona)
		root/controle 	(login para mim)
		
	
	
		
		

	como prevenir 2 alunos logarem com o mesmo nome? (fraude)
		- não é possível ter senhas, e ainda que tivesse
		
		solução: detectar de onde vem os dados
		se o usuário estiver logado e os dados virem com a flag "prova" -> ok
		se o usuário estiver logado e os dados virem da tela de login -> negar
		se der problema com o login do usuário e ele tiver que logar de novo
			-> eu derrubo ele da minha plataforma de controle (usando ID)
		
	criar um ambiente de controle para mim
		função: deslogar usuário, para ele poder relogar
		
	
	change the questions container's horizontal margin
	(/question and /teacher-question)


	check if all questions have answers when trying to finish the exam
		
	


*/


/*
DB

check if db types of data are appropriate

*/

CREATE TABLE students(
	id INT PRIMARY KEY AUTO_INCREMENT,
	name VARCHAR(50) NOT NULL,
	birthdate DATE NOT NULL,
	number INT NOT NULL,
	classroom VARCHAR(20) NOT NULL,
	school VARCHAR(50) NOT NULL,
	score INT	
);

CREATE TABLE teachers(
	id INT PRIMARY KEY AUTO_INCREMENT,
	subject VARCHAR(20) NOT NULL,
	name VARCHAR(50) NOT NULL,
	password CHAR(60) NOT NULL
);

CREATE TABLE questions(
	id INT PRIMARY KEY AUTO_INCREMENT,
	subject VARCHAR(20) NOT NULL,
	id_teacher INT NOT NULL,
	question VARCHAR(1000) NOT NULL,
	correct_answer VARCHAR(500) NOT NULL,
	wrong_answer_1 VARCHAR(500) NOT NULL,
	wrong_answer_2 VARCHAR(500) NOT NULL,
	wrong_answer_3 VARCHAR(500) NOT NULL,
	wrong_answer_4 VARCHAR(500) NOT NULL,
	FOREIGN KEY (id_teacher) REFERENCES teachers(id)
);

CREATE TABLE student_answers(
	id INT PRIMARY KEY AUTO_INCREMENT,
	id_students INT NOT NULL,
	id_questions INT NOT NULL,
	answer CHAR(1) NOT NULL,
	FOREIGN KEY (id_students) REFERENCES students(id),
	FOREIGN KEY (id_questions) REFERENCES questions(id)
);