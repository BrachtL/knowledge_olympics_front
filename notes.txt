

/*
considerações:

	next steps:
	
	- add password and confirmation password fields to sutedent's login page
	
	- backend: student login 
		receive form data, send jwt and student's name
		jwt should store student or teacher, id, name
	- frontend: make a request with token to verify if user is logged
	when trying to access /question and /teacher-question
	- backend: verify if the token is valid when trying to access
	/question and /teacher-question
	
	show the student's name on the top, to prevent and detect if someone uses
	the other student's name
	
	
	jwt has to expire 05 minutes after the exam's duration
	

	urls
		root/aluno 		(login do aluno)
		root/professor 	(login do professor)
		root/prova 		(aluno resolve a prova, se não estiver logado redir)
		root/criar 		(professor cria questões, se não estiver logado redir)
		root/ 			(pergunta se é aluno ou prof e redireciona)
		root/controle 	(login para mim)
		
	
	
		
		

	como prevenir 2 alunos logarem com o mesmo nome? (fraude)
		- não é possível ter senhas, e ainda que tivesse
		
		solução: mostrar na tela o nome, turma e numero da chamada do user
		
		solução: detectar de onde vem os dados
		se o usuário estiver logado e os dados virem com a flag "prova" -> ok
		se o usuário estiver logado e os dados virem da tela de login -> negar
		se der problema com o login do usuário e ele tiver que logar de novo
			-> eu derrubo ele da minha plataforma de controle (usando ID)
		
	criar um ambiente de controle para mim
		função: deslogar usuário, para ele poder relogar
		
	
	change the questions container's horizontal margin
	(/question and /teacher-question)


	check if all questions have answers when trying to finish the exam
		
	


*/


/* 
DONE {
	DB

	check if db types of data are appropriate
}
*/

CREATE TABLE students(
	id INT PRIMARY KEY AUTO_INCREMENT,
	name VARCHAR(50) NOT NULL,
	birthdate DATE NOT NULL,
	number INT NOT NULL,
	classroom VARCHAR(20) NOT NULL,
	school VARCHAR(50) NOT NULL,
	score INT	
);

CREATE TABLE teachers(
	id INT PRIMARY KEY AUTO_INCREMENT,
	subject VARCHAR(20) NOT NULL,
	name VARCHAR(50) NOT NULL,
	password CHAR(60) NOT NULL
);

CREATE TABLE questions(
	id INT PRIMARY KEY AUTO_INCREMENT,
	subject VARCHAR(20) NOT NULL,
	id_teacher INT NOT NULL,
	question VARCHAR(1000) NOT NULL,
	correct_answer VARCHAR(500) NOT NULL,
	wrong_answer_1 VARCHAR(500) NOT NULL,
	wrong_answer_2 VARCHAR(500) NOT NULL,
	wrong_answer_3 VARCHAR(500) NOT NULL,
	wrong_answer_4 VARCHAR(500) NOT NULL,
	FOREIGN KEY (id_teacher) REFERENCES teachers(id)
);

CREATE TABLE student_answers(
	id INT PRIMARY KEY AUTO_INCREMENT,
	id_students INT NOT NULL,
	id_questions INT NOT NULL,
	answer CHAR(1) NOT NULL,
	FOREIGN KEY (id_students) REFERENCES students(id),
	FOREIGN KEY (id_questions) REFERENCES questions(id)
);


ALTER TABLE questions
ADD media_type VARCHAR(20) NOT NULL,
ADD media_name VARCHAR(500),
ADD media_url VARCHAR(500),
ADD media_source VARCHAR(500);

ALTER TABLE questions
MODIFY question VARCHAR(2000) NOT NULL;


UPDATE questions SET media_type = 'no';

fabianemadre@*
INSERT INTO teachers (subject, name, password) values ('German', 'Fabiane', '$2a$10$e4aRnvUr3aKdQY3DRtUsjuE6ALcSkvR8TaZeFhQKaKOEKAThiE3rm');
INSERT INTO teachers (subject, name, password) values ('German', 'Gerlinde', '$2a$10$G7MHh/qcPfizsl06pveW6e924/9udUTT0KNcvZzf6WdDrLAShmanm');
gerlindemadre$&

INSERT INTO questions (subject, id_teacher, question, correct_answer, wrong_answer_1, wrong_answer_2, wrong_answer_3, wrong_answer_4) values ("German", 2, '', '', '', '', '', '');

INSERT INTO questions (subject, id_teacher, question, correct_answer, wrong_answer_1, wrong_answer_2, wrong_answer_3, wrong_answer_4) values ("German", 3, '', '', '', '', '', '');


 ALTER TABLE students ADD creation_datetime DATETIME NOT NULL;
 
 ALTER TABLE questions ADD media_text VARCHAR(5000);
 
 
 /*
 
 Loading exam page steps
 
	front next commit message:
	
>>>>>>>>>>  delete text var from the login.jsx file  <<<<<<<<<<

	FEATURE: media manipulation in exam page


	DONE: first version: without media manipulation
	(I will send, but not use it in front yet)
	
	DONE: second version: with media manipulation
	
		- audio
		- text
	
	
	DONE {
		Back algorithm:
		
			- create questionsArray
				- shuffle alternatives (options) here
			- create orderedQuestionsArray and mediasArray
			- must to check if media_name != null or '' (or type != no ??)
			- extract the different medias from the questions in an ARRAY
			- I must to add "no" type in the mediasArray
			- create separeted arrays : audio, others
			- shuffle audio and others
			- if id is even, audio will be the first in this ARRAY
			- if id is odd, audio would be the last in this ARRAY
			- loop inside a loop to check if each question matches or not each media
				- create a temp array with the questions that match this media in loop
				//- shuffle this array at the end of the loop
				- join it into the orderedQuestionsArray
			
			- bug in the loop inside a loop to order the questions properly
				
		commit backend
	
		than make the first version in front, commit
	}
	
	DONE: than next version in front, commit
	
	I think it is DONE: - audios are not organized as intented to
	
	
	deal with image (if needed)
	
	- send id property from backend on each question of questions array
	(- send it back again when send the exam from the frontend)
	commit back again if any changes
		
*/
 


/*

maybe another solution is to send the current cookie and try to match
to the content id is being modified (teachers only). It prevents to have a lot
of modifications and lose everything when trying to save

Solve this multiple login problem!

bug -> when an user logs in another tab, the cookie is update to this new one.
if the previous user (assuming a teacher) updates questions,
the modal says it was good, but it was not.
Actually, it could lead to a bigger problem, which is one teacher overwright
data of another teacher.

I have to:
	- check if the question id matches (belogs to) teacher id,
	if it is not, ask username and password again, if it maches, update
	if it does not match, delete cookie and redirect
	
	or: ask again username and password and see if it matches current cookie
	(best one) --> or: ask again username and password and see if the question ids matches
	
	
	for the student: check if the name in frontend matches with the name
	related to the cookie id, if it does not match, we have a problem (fraud)
	
	say to the supervisor that the student should remain in the same PC
	all the exam. If it has to change, I have to know what student is.

*/

/*

bug -> why the requests are being made twice?
I load a page once and the server receives 2 requests

*/


UPDATE questions
SET media_text = '<p>Es gibt sehr viele verschiedene Berufe.</p><p>Ein <b>Lehrer</b> unterrichtet Schüler und bringt ihnen verschiedene Dinge bei. In einer Volksschule lehren Lehrer den Kindern das Lesen und Schreiben. Lehrer arbeiten auch mit älteren Kindern und Jugendlichen. Dort unterrichten sie meistens ein bestimmtes Fach, Mathematik oder Sprachen zum Beispiel.</p>

<p>Ein anderer Beruf, bei dem man auf der Universität studieren muss: <b>Arzt</b>. Ein Arzt behandelt kranke Leute in einer Praxis oder im Krankenhaus. Er untersucht die Menschen und stellt fest, was ihnen fehlt. Er verschreibt Medikamente oder andere Behandlungen. Es gibt viele verschiedene Ärzte, manche sind Chirurgen, andere sind Ohrenärzte oder Zahnärzte.</p>

<p>Handwerker lernen ihren Beruf in einer Berufsausbildung. Ein Handwerker ist zum Beispiel ein <b>Bäcker</b>. Er stellt Brot her. Dazu muss er wissen, wie man Mehl, Salz, Hefe und andere Zutaten mischt. Bäcker können sehr viele verschiedene Sorten Brot machen, auch süßes Gebäck.</p>

<p>Ein <b>Bauer</b> arbeitet auch mit Lebensmitteln. Auf seinem Hof hält er Tiere wie Kühe, Hühner oder Schweine. Auf den Feldern pflanzt er Getreidesorten oder Gemüse und Obst. Das liefert er an Supermärkte oder verkauft es selbst auf einem Markt.</p>

<p>Ein <b>Koch</b> arbeitet auch mit Lebensmitteln. In einem Restaurant bereitet er die Speisen zu. Seine Ausbildung macht er entweder in einer Schule oder in einer Lehre.</p>

<p>Ein <b>Verkäufer</b> arbeitet in einem Laden. Dort verkauft er an die Kunden, was der Laden bietet: Das können Lebensmittel sein, aber auch Kleidung oder Autos. </p>'
WHERE media_name = 'Berufe';






  
  
 