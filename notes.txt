

/*
considerações:

	next steps:
	
	//old: add password and confirmation password fields to student's login page
	I will use one code for the first exam and another code to the second exam
	
	DONE:
	- backend: student login 
		receive form data, send jwt and student's name
		jwt should store student or teacher, id, name
	- frontend: make a request with token to verify if user is logged
	when trying to access /question and /teacher-question
	- backend: verify if the token is valid when trying to access
	/question and /teacher-question
	
	DONE: show the student's name on the top, to prevent and detect if someone uses
	the other student's name
	
	
	old: jwt has to expire 05 minutes after the exam's duration
	!!!! dont do it. The power could be off
	

	urls
		root/aluno 		(login do aluno)
		root/professor 	(login do professor)
		root/prova 		(aluno resolve a prova, se não estiver logado redir)
		root/criar 		(professor cria questões, se não estiver logado redir)
		root/ 			(pergunta se é aluno ou prof e redireciona)
		root/controle 	(login para mim)
		
	
	

	como prevenir 2 alunos logarem com o mesmo nome? (fraude)
		- não é possível ter senhas, e ainda que tivesse
		
		DONE: solução: mostrar na tela o nome, turma e numero da chamada do user
		
		solução: detectar de onde vem os dados
		
		- criar uma flag para o usuário que logou,
		então ninguem mais pode logar nesse nome
		- se der problema com o login do usuário e ele tiver que logar de novo
			-> eu derrubo ele da minha plataforma de controle (usando ID)
		
		//criar um ambiente de controle para mim
		//função: deslogar usuário, para ele poder relogar


	check if all questions have answers when trying to finish the exam
	

*/


/* 
DONE {
	DB

	check if db types of data are appropriate
}
*/

CREATE TABLE students(
	id INT PRIMARY KEY AUTO_INCREMENT,
	name VARCHAR(50) NOT NULL,
	birthdate DATE NOT NULL,
	number INT NOT NULL,
	classroom VARCHAR(20) NOT NULL,
	school VARCHAR(50) NOT NULL,
	score INT	
);

CREATE TABLE teachers(
	id INT PRIMARY KEY AUTO_INCREMENT,
	subject VARCHAR(20) NOT NULL,
	name VARCHAR(50) NOT NULL,
	password CHAR(60) NOT NULL
);

CREATE TABLE questions(
	id INT PRIMARY KEY AUTO_INCREMENT,
	subject VARCHAR(20) NOT NULL,
	id_teacher INT NOT NULL,
	question VARCHAR(1000) NOT NULL,
	correct_answer VARCHAR(500) NOT NULL,
	wrong_answer_1 VARCHAR(500) NOT NULL,
	wrong_answer_2 VARCHAR(500) NOT NULL,
	wrong_answer_3 VARCHAR(500) NOT NULL,
	wrong_answer_4 VARCHAR(500) NOT NULL,
	FOREIGN KEY (id_teacher) REFERENCES teachers(id)
);

CREATE TABLE student_answers(
	id INT PRIMARY KEY AUTO_INCREMENT,
	id_students INT NOT NULL,
	id_questions INT NOT NULL,
	answer CHAR(1) NOT NULL,
	FOREIGN KEY (id_students) REFERENCES students(id),
	FOREIGN KEY (id_questions) REFERENCES questions(id)
);


ALTER TABLE questions
ADD media_type VARCHAR(20) NOT NULL,
ADD media_name VARCHAR(500),
ADD media_url VARCHAR(500),
ADD media_source VARCHAR(500);

ALTER TABLE questions
MODIFY question VARCHAR(2000) NOT NULL;


UPDATE questions SET media_type = 'no';

INSERT INTO teachers (subject, name, password) values ('German', 'Fabiane', '$2a$10$e4aRnvUr3aKdQY3DRtUsjuE6ALcSkvR8TaZeFhQKaKOEKAThiE3rm');
INSERT INTO teachers (subject, name, password) values ('German', 'Gerlinde', '$2a$10$G7MHh/qcPfizsl06pveW6e924/9udUTT0KNcvZzf6WdDrLAShmanm');

INSERT INTO questions (subject, id_teacher, question, correct_answer, wrong_answer_1, wrong_answer_2, wrong_answer_3, wrong_answer_4) values ("German", 2, '', '', '', '', '', '');

INSERT INTO questions (subject, id_teacher, question, correct_answer, wrong_answer_1, wrong_answer_2, wrong_answer_3, wrong_answer_4) values ("German", 3, '', '', '', '', '', '');


 ALTER TABLE students ADD creation_datetime DATETIME NOT NULL;
 
 ALTER TABLE questions ADD media_text VARCHAR(5000);
 
 
 /*
 
 Loading exam page steps
 
	front next commit message:
	
>>>>>>>>>>  delete text var from the login.jsx file  <<<<<<<<<<

	FEATURE: media manipulation in exam page


	DONE: first version: without media manipulation
	(I will send, but not use it in front yet)
	
	DONE: second version: with media manipulation
	
		- audio
		- text
	
	
	DONE {
		Back algorithm:
		
			- create questionsArray
				- shuffle alternatives (options) here
			- create orderedQuestionsArray and mediasArray
			- must to check if media_name != null or '' (or type != no ??)
			- extract the different medias from the questions in an ARRAY
			- I must to add "no" type in the mediasArray
			- create separeted arrays : audio, others
			- shuffle audio and others
			- if id is even, audio will be the first in this ARRAY
			- if id is odd, audio would be the last in this ARRAY
			- loop inside a loop to check if each question matches or not each media
				- create a temp array with the questions that match this media in loop
				//- shuffle this array at the end of the loop
				- join it into the orderedQuestionsArray
			
			- bug in the loop inside a loop to order the questions properly
				
		commit backend
	
		than make the first version in front, commit
	}
	
	DONE: than next version in front, commit
	
	I think it is DONE: - audios are not organized as intented to
	
	*/
	
/*
	DONE:
	deal with image (if needed)
	
	- send id property from backend on each question of questions array
	(- send it back again when send the exam from the frontend)
	commit back again if any changes
*/
		

 


/*
DONE (sort of): 
	maybe another solution is to send the current cookie and try to match
	to the content id is being modified (teachers only). It prevents to have a lot
	of modifications and lose everything when trying to save

	Solve this multiple login problem!

	bug -> when an user logs in another tab, the cookie is update to this new one.
	if the previous user (assuming a teacher) updates questions,
	the modal says it was good, but it was not.
	Actually, it could lead to a bigger problem, which is one teacher overwright
	data of another teacher.

	I have to:
		- check if the question id matches (belongs to) teacher id,
		if it is not, ask username and password again, if it maches, update
		if it does not match, delete cookie and redirect
		
		or: ask again username and password and see if it matches current cookie
		(best one) --> or: ask again username and password and see if the question ids matches
		
		
		for the student: check if the name in frontend matches with the name
		related to the cookie id, if it does not match, we have a problem (fraud)
*/

/*

bug -> why the requests are being made twice?
I load a page once and the server receives 2 requests

*/


ALTER TABLE student_answers
MODIFY answer VARCHAR(500);

ALTER TABLE students
ADD are_options_created BOOLEAN DEFAULT FALSE;



/*

Exam guidelines:

	- the student should remain in the same PC all the exam. If it has to change,
	I have to know what student is (and set the initiated to false)
	
	- tell students the test will be automatically finished when the time ends
	
	- tell students there are several mechanisms to prevent fraud and it will ID
	the student who fraud
	

Verification Day:

	- some places was used Frage, some others Fragen. Which one is right?
	- ask them to find other minor errors


*/





/*

NEXT STEPS (security/login/fraud)

		DONE: - prevent teacher to log in when there is cookie saved
		(like I already did in student login page)

		DONE: - match the type alongsige with id, since there are duplicated ids
		between types

		DONE: - every 5 seconds check if the cookie's id is the same the id
		I have in the frontend pagedata: send both to API and check if it matches
		create a resource for it (/checkLogin POST)
	
		DONE: - on the function I already have to save questions -> execute the
		same function checkLogin executes to match frontend data with cookie data
	
		DONE: FOR BOTH cases above: define a message "match fail"
		DONE: in frontend -> when the message is "match fail", erase cookie and reload page
	
	
		DONE: - when there is cookie, redirect from any login page to the proper page
		which are questions if student or create-questions if teacher
	
	
	- I need still to show modal message and redirect (login page when there
	is cookie)
	(instead of a modal, I can show the message in login page, using context)
	
	
		DONE: - use matchCookie thing on teacher question-creation as well
		- when save and every 5 seconds
	
	
		
	FRONT COMMIT MESSAGE:
		
			DONE:
			FEATURE: prevent teacher login if there is jwt cookie; match cookie interval 5 seconds
			FEATURE: prevent login when there is a jwt cookie; if id and tyoe sent
			through body doest not match those on jwt header, erase cookie
			and refresh page; fix redirecting always sending to student login page
			
		
	BACK COMMIT MESSAGE:
			
			DONE:
			FEATURE: userId is now sent with user's data, matchCookie
			
		

*/

/*

//change student's cookie expiration time from 7 days to 3h
(actually, it wont make any difference, because the way I control the access to exam page
is via "finished" when loading exam page)
*/

/*
	DONE:
	find out why I am having "err is not defined" in teacher and student
	login page when the user does not exist
*/


ALTER TABLE students
ADD is_finished BOOLEAN DEFAULT FALSE;

ALTER TABLE students
ADD is_started BOOLEAN DEFAULT FALSE;



CREATE TABLE codes(
	id INT PRIMARY KEY AUTO_INCREMENT,
	code VARCHAR(30) NOT NULL,
	is_enabled BOOLEAN NOT NULL
);

INSERT INTO codes (code, is_enabled) values ('period1', false);
INSERT INTO codes (code, is_enabled) values ('period2', false);
INSERT INTO codes (code, is_enabled) values ('create', false);


/*

fields to be created in DB
1 - table student / finished: (prevent users to answer after the time ended and prevent next
							   students to see privious students answers)
	done: - when true, cannot open the exam anymore
	done: - is checked when loading the questions page
		//and when sending anything to save during the exam
	done: - (actually, I did not have to change it) and on the setInterval function (matchCookie that will be changed to valdiateStudent)
	done: - is set true when clicking on exam page button
	(I can force finished for all created users on my control, it will prevent
	the next students to see the previous exams if someone does not manage to send
	the exam)
	(I need to alter match cookie function on api to validateStudent,
	and check finished alongside type and id)
		
2 - table student / initiated: (prevent 2 people logged in the same name (fraud) and prevent
								the student itself to log in and see the exam at home)
	done: - when true, no one can login again with this info
	done: - is checked on login page when clicking on the button
	done: - is set when load exam page data (I am setting it every load, change it in the future)
	(if power went out, the cookie will remain saved and when the user open the login
	page, he will be redirected to the exam page)
	(on my control panel, I change initiated to false if user needs to login again for
	some weird reason, but he will have to login on anonymous page probably)
	
		DONE: show error messages regarding is finished and is initiated
	TODO: show modals when finish the exam
	
		CREATED: table control / code1_enabled, code2_enabled
				(when true, can login/create users)
					-> I will have to change the way I block user creation
		DONE: Create the code field on student frontend
		DONE: Add code1, code2, and code_master to env vars
		DONE: create "period" field in student table, insert it when creating the user
		DONE: Check on backend's create student user if the code is == code1 or code2
		DONE: if code == code1 or code2, check if it is enabled and create user
	
	

		DONE: To login user: period1 or period2 == TRUE
		
	TODO: Test this whole code/period things again
		
	What other things I need on my control?
		initiated, finished
		
	on student login frontend, add field "código"
	on the creation algorithm, add this:
		if code == env.code_master -> create user
		if code == env.code1 -> check if code1_enabled is true -> create user
		if code == env.code2 -> check if code2_enabled is true -> create user

*/

CREATE TABLE questions_stats(
	id INT PRIMARY KEY AUTO_INCREMENT,
	id_questions INT NOT NULL UNIQUE,
	right_answers INT NOT NULL,
	FOREIGN KEY (id_questions) REFERENCES questions(id)
);

INSERT INTO questions_stats (id_questions, right_answers)
SELECT id, 0
FROM (SELECT 4 AS id UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8
      UNION SELECT 9 UNION SELECT 10 UNION SELECT 11 UNION SELECT 12
      UNION SELECT 13 UNION SELECT 14 UNION SELECT 15 UNION SELECT 16
      UNION SELECT 17 UNION SELECT 18 UNION SELECT 19 UNION SELECT 20
      UNION SELECT 21 UNION SELECT 22 UNION SELECT 23) AS id_range;



ALTER TABLE student_answers
ADD is_right BOOLEAN DEFAULT FALSE;

ALTER TABLE student_answers
MODIFY COLUMN is_right BOOLEAN DEFAULT NULL;

UPDATE student_answers SET is_right = NULL;


ALTER TABLE students
ADD password char(60) NOT NULL DEFAULT '$2a$10$eRJY0sGpZrhRkHoOuTTavOjoC6uIHS2XlTSjW2vplnLds39x6v8Ca';
/*test123*/


/*


    DONE: delete cookie only when it came here because of is_finished = 1


	DONE: load marked answers when loading questions page
	
	
NEXT STEP: 

	DONE: make the statistics login page (name, password)

	make the statistics page
	- (if who logs in is not a student, show the statistics and the questions with the right answers marked
	with disabled radio buttons)
	- (if who logs in is a student, show the questions with its options marked, with disabled radio buttons)
	
	
TODO: student login field validations

	DONE: (check results)
	a resource that triggers the CheckResults (only me allowed)
	similar to a login page, but there is no cookie/session and there is no redirection
	put password, click on the button, send the password to API, and receive a console.log message
	(When the button is pressed, the password is sent to backend and compared with a hardcoded password)

questions statistics system 
(todo: create password and confirm password fields for the student's login
it will be used to check the results later: here)
	make a frontend page with a password field and a button.


	questions statistics page
	load questions statistics




	ALL DONE:
		I need this one too on the verification Day
		students ordinator system
		(tiebreak will be applied considering questions with more wrong answers)
		DONE: - create tiebreak_score on students table

		- get all students from db (id, score, tiebreak_score)
		- order the students by score
		- students with the same score: give tiebreak points based on the answers with less hits
		while there are still students tied on that rank position
		- reorder the tied ones on that position based on the tiebreak points


*/

/* temp queries:

UPDATE students SET is_started = 0, is_finished = 0;

UPDATE questions SET media_url='https://cdn.glitch.global/afcc3baf-6f75-4045-bcce-9a4bd6cc74e5/thumbnails%2F3b1f8767-6ef2-456c-9729-9fcf1653e6d9.image.png?1695043092731'
where id = 13;

*/

UPDATE questions SET media_url='https://cdn.glitch.global/afcc3baf-6f75-4045-bcce-9a4bd6cc74e5/gruesse-aus-dem-urlaub.mp3?v=1695297633551'
where id = 4;

UPDATE questions SET media_url='https://cdn.glitch.global/afcc3baf-6f75-4045-bcce-9a4bd6cc74e5/im-wald.mp3?v=1695297635148'
where id = 5;

UPDATE questions SET media_url='https://cdn.glitch.global/afcc3baf-6f75-4045-bcce-9a4bd6cc74e5/lange-reise.mp3?v=1695297637773'
where id = 6;


ALTER TABLE students
ADD period INT;


/*

I have to check this to avoid fraud:

	- the codes (period1, period2) are to create user, because if I apply it on login as well,
	I cant disable it after the students start the exam (create their users)
	
	SO -> I have to check if the amount of created users matches the students solving the exam in the
	classroom. If there are fewer users, someone did not log in. If there are more users, someone is logging
	from home (or somewhere else out of classroom)
	* And I can assure it has its own login, because of the is_started that prevents log in from 2 different PCs
	
	Conclusion -> I have to check if the amount of created users match exactly the students in the classroom
	Then, I have to disable the code (period1 or period2)

*/



/*

Solving glitch bugs:

	run enable-npm
	
	backup copy of package.json



	{
  "name": "glitch-hello-node",
  "version": "0.1.0",
  "description": "A simple Node app built on fastify, instantly up and running. Built to be remixed on Glitch.com.",
  "main": "server.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "@fastify/formbody": "^7.4.0",
    "@fastify/static": "^6.10.1",
    "@fastify/view": "^7.4.1",
    "bcrypt": "^5.1.0",
    "dotenv": "^16.3.1",
    "express": "^4.18.2",
    "fastify": "^4.17.0",
    "handlebars": "^4.7.7",
    "jsonwebtoken": "^9.0.1",
    "mysql2": "^3.6.1"
  },
  "engines": {
    "node": "16.x"
  },
  "repository": {
    "url": "https://glitch.com/edit/#!/glitch-hello-node"
  },
  "license": "MIT",
  "keywords": [
    "node",
    "glitch"
  ]
}


*/



/*

useful commands for the exam Day

log someone out:
	1 - UPDATE students SET is_finished = 1 where id = XX;
	2 - change any line on front code forcing everyone to auto reload
	
	


*/



/*

alunos	questões	time(s)
6		20			21
7		20			24
14		20			44


*/



/*

PERFORMANCE

- change the multiple queries (loop with queries) by a query with multiple rows,
using IN and CASE statement, if necessary 

*/


/*

write about something I learn and use it in other places of my code: 
keyword SQL FIELD to order

*/




